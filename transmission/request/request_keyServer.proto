syntax = "proto3";
import "google/protobuf/empty.proto";

// requestServer send it to keyServer
message requestEncResult{
  int32 cid = 1; // client id
  int32 qid = 2; //query id
  string ipaddress = 3;
  bytes encResult = 4;
}

// requestServer send serialized encrypted vector, keyServer send serialized encrypted vector
message vectorResult{
  bytes vectorMsg = 1;
}

message divVectors{
  bytes dividendMsg = 1;
  bytes divisorMsg = 2;
}

message booleanResult{
  bool boolMsg = 1;
}

message requestGenerateNoise{
  int32 cid = 1;
  int32 qid = 2;
  string type = 3;
}

message requestGetNoise{
  int32 db_name = 1;
  int32 cid = 2;
  int32 qid = 3;
}

message responseNoise{
  bytes noiseMsg = 1;
}

service KeyServerService {
  // requestServer remotes the call and get decrypt data.
  rpc RequestDecrypt (vectorResult) returns(vectorResult);
  // requestServer remotes the call and keyServer send decrypted result to clientProxy
  rpc ReturnResult (requestEncResult) returns(google.protobuf.Empty);
  //requestServer remotes the call, and keyServer generates noise list
  rpc GenerateNoise(requestGenerateNoise) returns(google.protobuf.Empty);
  //dataServer remotes the call, and keyServer sends noise back
  rpc GetNoise(requestGetNoise) returns(responseNoise);
  //keyServer provides the following operations: division,sqrt,boolean positive
  rpc BooleanPositive(vectorResult) returns(booleanResult);
  rpc SqrtEncVector(vectorResult) returns(vectorResult);
  rpc DivEncVector(divVectors) returns(vectorResult);

}