# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import transmission.request.request_keyServer_pb2 as request__keyServer__pb2


class KeyServerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestDecrypt = channel.unary_unary(
                '/KeyServerService/RequestDecrypt',
                request_serializer=request__keyServer__pb2.vectorResult.SerializeToString,
                response_deserializer=request__keyServer__pb2.vectorResult.FromString,
                )
        self.ReturnResult = channel.unary_unary(
                '/KeyServerService/ReturnResult',
                request_serializer=request__keyServer__pb2.requestEncResult.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.BooleanPositive = channel.unary_unary(
                '/KeyServerService/BooleanPositive',
                request_serializer=request__keyServer__pb2.vectorResult.SerializeToString,
                response_deserializer=request__keyServer__pb2.booleanResult.FromString,
                )
        self.GenerateNoise = channel.unary_unary(
                '/KeyServerService/GenerateNoise',
                request_serializer=request__keyServer__pb2.requestGenerateNoise.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.GetNoise = channel.unary_unary(
                '/KeyServerService/GetNoise',
                request_serializer=request__keyServer__pb2.requestGetNoise.SerializeToString,
                response_deserializer=request__keyServer__pb2.responseNoise.FromString,
                )


class KeyServerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RequestDecrypt(self, request, context):
        """requestServer remotes the call and get decrypt data.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReturnResult(self, request, context):
        """requestServer remotes the call and keyServer send decrypted result to clientProxy
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BooleanPositive(self, request, context):
        """requestServer remotes the call and keyServer judges whether the encrypted vector is positive,return flag back
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateNoise(self, request, context):
        """requestServer remotes the call, and keyServer generates noise list
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNoise(self, request, context):
        """dataServer remotes the call, and keyServer sends noise back
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KeyServerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestDecrypt': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestDecrypt,
                    request_deserializer=request__keyServer__pb2.vectorResult.FromString,
                    response_serializer=request__keyServer__pb2.vectorResult.SerializeToString,
            ),
            'ReturnResult': grpc.unary_unary_rpc_method_handler(
                    servicer.ReturnResult,
                    request_deserializer=request__keyServer__pb2.requestEncResult.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'BooleanPositive': grpc.unary_unary_rpc_method_handler(
                    servicer.BooleanPositive,
                    request_deserializer=request__keyServer__pb2.vectorResult.FromString,
                    response_serializer=request__keyServer__pb2.booleanResult.SerializeToString,
            ),
            'GenerateNoise': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateNoise,
                    request_deserializer=request__keyServer__pb2.requestGenerateNoise.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'GetNoise': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNoise,
                    request_deserializer=request__keyServer__pb2.requestGetNoise.FromString,
                    response_serializer=request__keyServer__pb2.responseNoise.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'KeyServerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class KeyServerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RequestDecrypt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/KeyServerService/RequestDecrypt',
            request__keyServer__pb2.vectorResult.SerializeToString,
            request__keyServer__pb2.vectorResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReturnResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/KeyServerService/ReturnResult',
            request__keyServer__pb2.requestEncResult.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BooleanPositive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/KeyServerService/BooleanPositive',
            request__keyServer__pb2.vectorResult.SerializeToString,
            request__keyServer__pb2.booleanResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateNoise(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/KeyServerService/GenerateNoise',
            request__keyServer__pb2.requestGenerateNoise.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNoise(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/KeyServerService/GetNoise',
            request__keyServer__pb2.requestGetNoise.SerializeToString,
            request__keyServer__pb2.responseNoise.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
