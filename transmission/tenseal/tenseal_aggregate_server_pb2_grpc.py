# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import transmission.tenseal.tenseal_aggregate_server_pb2 as tenseal__aggregate__server__pb2


class AggregationServerServiceStub(object):
    """message aggr_params{
    bytes params_msg = 1;
    }

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.sum_encrypted = channel.unary_unary(
                '/AggregationServerService/sum_encrypted',
                request_serializer=tenseal__aggregate__server__pb2.aggr_params.SerializeToString,
                response_deserializer=tenseal__aggregate__server__pb2.aggr_params.FromString,
                )


class AggregationServerServiceServicer(object):
    """message aggr_params{
    bytes params_msg = 1;
    }

    """

    def sum_encrypted(self, request, context):
        """AggregateServer provides the interface, client remotes the call
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AggregationServerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'sum_encrypted': grpc.unary_unary_rpc_method_handler(
                    servicer.sum_encrypted,
                    request_deserializer=tenseal__aggregate__server__pb2.aggr_params.FromString,
                    response_serializer=tenseal__aggregate__server__pb2.aggr_params.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AggregationServerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AggregationServerService(object):
    """message aggr_params{
    bytes params_msg = 1;
    }

    """

    @staticmethod
    def sum_encrypted(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AggregationServerService/sum_encrypted',
            tenseal__aggregate__server__pb2.aggr_params.SerializeToString,
            tenseal__aggregate__server__pb2.aggr_params.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
