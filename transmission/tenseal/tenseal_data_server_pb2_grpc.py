# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import transmission.tenseal.tenseal_data_server_pb2 as tenseal__data__server__pb2


class DatabaseServerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.query_operation = channel.unary_unary(
                '/DatabaseServerService/query_operation',
                request_serializer=tenseal__data__server__pb2.query_msg_parse_server.SerializeToString,
                response_deserializer=tenseal__data__server__pb2.enc_query_result.FromString,
                )
        self.noise_query_operation = channel.unary_unary(
                '/DatabaseServerService/noise_query_operation',
                request_serializer=tenseal__data__server__pb2.query_msg_parse_server.SerializeToString,
                response_deserializer=tenseal__data__server__pb2.enc_query_result.FromString,
                )
        self.query_from_buffer = channel.unary_unary(
                '/DatabaseServerService/query_from_buffer',
                request_serializer=tenseal__data__server__pb2.buffer_query_msg.SerializeToString,
                response_deserializer=tenseal__data__server__pb2.query_result_result.FromString,
                )
        self.n_th_query_operation = channel.unary_unary(
                '/DatabaseServerService/n_th_query_operation',
                request_serializer=tenseal__data__server__pb2.n_th_query_msg.SerializeToString,
                response_deserializer=tenseal__data__server__pb2.n_th_query_result.FromString,
                )
        self.query_mode_using_hash = channel.unary_unary(
                '/DatabaseServerService/query_mode_using_hash',
                request_serializer=tenseal__data__server__pb2.query_mode_using_hash_msg.SerializeToString,
                response_deserializer=tenseal__data__server__pb2.query_mode_using_hash_result.FromString,
                )
        self.query_median_posi = channel.unary_unary(
                '/DatabaseServerService/query_median_posi',
                request_serializer=tenseal__data__server__pb2.query_median_posi_msg.SerializeToString,
                response_deserializer=tenseal__data__server__pb2.query_median_posi_result.FromString,
                )
        self.get_count = channel.unary_unary(
                '/DatabaseServerService/get_count',
                request_serializer=tenseal__data__server__pb2.query_count_msg.SerializeToString,
                response_deserializer=tenseal__data__server__pb2.enc_query_result.FromString,
                )
        self.get_nearest = channel.unary_unary(
                '/DatabaseServerService/get_nearest',
                request_serializer=tenseal__data__server__pb2.query_nearest_msg.SerializeToString,
                response_deserializer=tenseal__data__server__pb2.query_nearest_msg.FromString,
                )


class DatabaseServerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def query_operation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def noise_query_operation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def query_from_buffer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def n_th_query_operation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def query_mode_using_hash(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def query_median_posi(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_count(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_nearest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DatabaseServerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'query_operation': grpc.unary_unary_rpc_method_handler(
                    servicer.query_operation,
                    request_deserializer=tenseal__data__server__pb2.query_msg_parse_server.FromString,
                    response_serializer=tenseal__data__server__pb2.enc_query_result.SerializeToString,
            ),
            'noise_query_operation': grpc.unary_unary_rpc_method_handler(
                    servicer.noise_query_operation,
                    request_deserializer=tenseal__data__server__pb2.query_msg_parse_server.FromString,
                    response_serializer=tenseal__data__server__pb2.enc_query_result.SerializeToString,
            ),
            'query_from_buffer': grpc.unary_unary_rpc_method_handler(
                    servicer.query_from_buffer,
                    request_deserializer=tenseal__data__server__pb2.buffer_query_msg.FromString,
                    response_serializer=tenseal__data__server__pb2.query_result_result.SerializeToString,
            ),
            'n_th_query_operation': grpc.unary_unary_rpc_method_handler(
                    servicer.n_th_query_operation,
                    request_deserializer=tenseal__data__server__pb2.n_th_query_msg.FromString,
                    response_serializer=tenseal__data__server__pb2.n_th_query_result.SerializeToString,
            ),
            'query_mode_using_hash': grpc.unary_unary_rpc_method_handler(
                    servicer.query_mode_using_hash,
                    request_deserializer=tenseal__data__server__pb2.query_mode_using_hash_msg.FromString,
                    response_serializer=tenseal__data__server__pb2.query_mode_using_hash_result.SerializeToString,
            ),
            'query_median_posi': grpc.unary_unary_rpc_method_handler(
                    servicer.query_median_posi,
                    request_deserializer=tenseal__data__server__pb2.query_median_posi_msg.FromString,
                    response_serializer=tenseal__data__server__pb2.query_median_posi_result.SerializeToString,
            ),
            'get_count': grpc.unary_unary_rpc_method_handler(
                    servicer.get_count,
                    request_deserializer=tenseal__data__server__pb2.query_count_msg.FromString,
                    response_serializer=tenseal__data__server__pb2.enc_query_result.SerializeToString,
            ),
            'get_nearest': grpc.unary_unary_rpc_method_handler(
                    servicer.get_nearest,
                    request_deserializer=tenseal__data__server__pb2.query_nearest_msg.FromString,
                    response_serializer=tenseal__data__server__pb2.query_nearest_msg.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DatabaseServerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DatabaseServerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def query_operation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DatabaseServerService/query_operation',
            tenseal__data__server__pb2.query_msg_parse_server.SerializeToString,
            tenseal__data__server__pb2.enc_query_result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def noise_query_operation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DatabaseServerService/noise_query_operation',
            tenseal__data__server__pb2.query_msg_parse_server.SerializeToString,
            tenseal__data__server__pb2.enc_query_result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def query_from_buffer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DatabaseServerService/query_from_buffer',
            tenseal__data__server__pb2.buffer_query_msg.SerializeToString,
            tenseal__data__server__pb2.query_result_result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def n_th_query_operation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DatabaseServerService/n_th_query_operation',
            tenseal__data__server__pb2.n_th_query_msg.SerializeToString,
            tenseal__data__server__pb2.n_th_query_result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def query_mode_using_hash(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DatabaseServerService/query_mode_using_hash',
            tenseal__data__server__pb2.query_mode_using_hash_msg.SerializeToString,
            tenseal__data__server__pb2.query_mode_using_hash_result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def query_median_posi(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DatabaseServerService/query_median_posi',
            tenseal__data__server__pb2.query_median_posi_msg.SerializeToString,
            tenseal__data__server__pb2.query_median_posi_result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_count(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DatabaseServerService/get_count',
            tenseal__data__server__pb2.query_count_msg.SerializeToString,
            tenseal__data__server__pb2.enc_query_result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_nearest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DatabaseServerService/get_nearest',
            tenseal__data__server__pb2.query_nearest_msg.SerializeToString,
            tenseal__data__server__pb2.query_nearest_msg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
